service: annasdarzs-bot

custom:
  tableName: 'annasdarzs-${self:provider.stage}'
  dynamodb:
    start:
      migrate: true

provider:
  name: aws
  runtime: rust
  memorySize: 128
  timeout: 300
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  environment:
    TG_TOKEN: ${ssm:ADP_TG_TOKEN~true}
    TG_CHAT_ID: ${ssm:ADP_TG_CHAT_ID-${self:provider.stage}}
    TABLE_NAME: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}"

package:
  individually: true

functions:
  annasdarzs-bot:
    handler: annasdarzs-bot
    events:
      - schedule: cron(30 * * * ? *)

resources:
  Resources:
    PostsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: text
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: text
            KeySchema:
              - AttributeName: text
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-rust
